Write insert, search & remove function for Trie data structure.

CODE:

class TrieNode{
    char data;
    boolean isTerminal;
    TrieNode[] children;
    int childCount=0;  //This is maintained for remove word function especially.

    public TrieNode(char data){
        this.data=data;
        this.isTerminal=false;
        this.children=new TrieNode[26];
        this.childCount=0;
    }
}
public class TrieInsert {
    private TrieNode root;

    public TrieInsert(){
        root=new TrieNode('\0');
    }

    public void insertHelper(TrieNode root,String word){
        if(word.length()==0){
            root.isTerminal=true;
            return;
        }
         int childIndex=word.charAt(0)-'A';
         TrieNode child = root.children[childIndex];

         if(child==null){
             child=new TrieNode(word.charAt(0));
             root.children[childIndex]=child;
         }
         insertHelper(child,word.substring(1));
    }

   public void insert(String word){
        insertHelper(root,word);
   }
   public boolean search(TrieNode root,String word){
        if(word.length()==0){
            return root.isTerminal;
        }
        int childIndex=word.charAt(0)-'A';
        TrieNode child = root.children[childIndex];

        if(child==null){
            return false;
        }
        return search(child,word.substring(1));
   }

   public void remove(TrieNode root,String word){
        if(word.length()==0){
            root.isTerminal=false;
            return;
        }
        int childIndex=word.charAt(0)-'A';
        TrieNode child=root.children[childIndex];

        if(child==null){
            return;
        }
        remove(child,word.substring(1));

        if(!child.isTerminal && child.childCount==0){
            root.children[childIndex]=null;
            root.childCount--;
        }
   }
}
